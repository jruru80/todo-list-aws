pipeline {
    agent any
    stages {
        stage('Get Code'){
            environment {
                URI_GITHUB = ''
            }
            steps {
                echo 'Trayendo codigo del repo'
                withCredentials([string(credentialsId: 'token', variable: 'token')]) {
                    script {
                     URI_GITHUB = 'https://'+token+'@github.com/jruru80/todo-list-aws'
                    }
                    git branch: 'develop', url: URI_GITHUB
                }
                echo 'Workspace'
                echo WORKSPACE 
            }
        }
        stage('Static Test'){
            steps {
                echo('Executing Static Flake8 Test')
                sh '''
                    export PYTHONPATH=.
                    python3 -m flake8 --format=pylint --exit-zero src/* > flake8.out
                '''
                echo 'Publishing result for flake8 without quality gates'
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
                echo('Executing Security Bandit Test')
                sh '''
                    bandit --exit-zero -r src/* -f custom -o bandit.out \
                    --msg-template "{relpath}:{line}: [{test_id}] {msg}"
                '''
                echo 'Publishing result for bandit without quality gates'
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
            }
        }
        stage('Deploy'){
            steps {
                sh '''
                    sam build
                    sam deploy template.yaml --config-env staging --no-confirm-changeset --force-upload --no-fail-on-empty-changeset
                '''
            }
        }
        stage('Rest Test'){
            steps {
                script{
                   def BASE_URL = sh (
                        script: "aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text",
                        returnStdout: true
                    ).trim()
                    env.BASE_URL = BASE_URL
                    echo('env.BASE_URL')
                    echo(env.BASE_URL)
                }
                echo 'Initiating Integration Tests'
                sh '''
                    export PYTHONPATH=.
                    pytest --junitxml=result-integration.xml test/integration/todoApiTest.py
                '''
                echo 'Publishing integration tests results'
                junit 'result-integration.xml'
            }
        }
        stage('Promote'){
            steps {
                echo('Discard generates files before checkout master')
                sh ('git clean -f')
                echo('tracking master and merge from develop')
                sh '''
                    git config --global merge.ours.driver true
                    git checkout master
                    git merge develop
                    git push
                '''
            }
        }
    }
    post { 
        always { 
            echo 'Clean env: delete dir'
            cleanWs()
        }
    }
}